package warewolfculb;
import java.util.*;

public class GameRoom implements Runnable{
    private String roomID;
    private String name;
    private String roomCode;
    private boolean isFull;
    private int numDay;
    private Timer time;
    private List<Player> players;
    private List<Role> roles;
    private Map<Player,Integer> votes = new HashMap<>();
    private Timer discussionTimer;
    private int day = 0;


    public GameRoom(String Name,List<Player> players, boolean defaultSettings) {
        if (defaultSettings) {
            this.roles = setRoleSettings(); // set the default game settings
        }
        this.name = name;
        this.players = players;
        this.roomID = roomID; // best generated by database
        this.isFull = false;
        this.numDay = 0;
    }

    public String getRoomID() {
        return roomID;
    }

    public int getNumDay() {
        return numDay;
    }

    public Timer getTime() {
        return time;
    }

    public List<Player> getPlayers() {
        return players;
    }

    public String getRoomCode() {
        if (roomCode == null || roomCode.isEmpty()){
            roomCode = GamePlaymaker.generateRandomRoomCode();
        }
        return roomCode;
    }

    private List<Role> setRoleSettings() {

        roles = new ArrayList<>();
        roles.add(new Werewolf());
        roles.add(new Werewolf());
        roles.add(new Seer());
        roles.add(new Doctor());
        roles.add(Villager.createVillagers().get(0));
        roles.add(Villager.createVillagers().get(1));
        roles.add(Villager.createVillagers().get(2));
        for (Role role : roles) {
            System.out.println(role.getRoleName());
        }
        return roles;
    }

    public void assignPlayerRoles() {
        Random rand = new Random();
        int numRoles = roles.size();

        if (numRoles == 0) {
            System.out.println("Error: No roles available to assign.");
            return;
        }

        for (int i = 0; i < players.size(); i++) {
            int roleIndex = rand.nextInt(numRoles);
            players.get(i).setPlayerRole(roles.get(roleIndex));
            roles.remove(roleIndex);
            numRoles--; // Decrement the number of available roles
        }
    }


    public void preGame() {
        System.out.println("Pre-Game started!");
        assignPlayerRoles();
    }
    public void startGame() {
        System.out.println("Game started!");
        this.time.start();
        numDay++;
    }

    public void endGame() {
        // Logic to end the game
        // This method will be responsible for resetting the game state, clearing player data, etc.
    }

    public void dayPhase() {
        System.out.println("Day " + day);
        System.out.println("Day phase begins...");

        // Start the discussion timer for 30 seconds
        discussionTimer = new Timer(30);
        discussionTimer.start();
        System.out.println("Start Discussion!");
        // Wait for the discussion timer to complete
        while (!discussionTimer.isExpired()) {
            long remainingTime = discussionTimer.getRemainingTime() / 1000; // Convert remaining time to seconds
            long countdownValue = remainingTime + 1;

            System.out.println(countdownValue);

            try {
                Thread.sleep(1000); // Sleep for 1 second
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("Discussion time is over!");
        //voting phase
        while (true) {//
            try {
                Thread.sleep(1000); // Sleep for 1 second before checking the condition again
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public void nightPhase() {
        // Logic for the night phase of the game
        // This method will handle the actions and events that occur during the night phase of the game
    }

    public String roomStatus() {
        // Return the status of the game room
        // This method can be used to retrieve information about the current status of the game room
        // You can return a string containing relevant details such as room ID, number of players, game phase, etc.
        // Customize the implementation based on your specific needs
        return "";
    }

    public void run() {

    }
}
