package wolfcub.main;

import javafx.application.Platform;
import wolfcub.resources.controllers.GameRoomController;

import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class GameRoom implements Runnable{
    private String roomID;
    private String name;
    private List<Player> players;
    private Timer timer;
    private Player currentPlayer;
    private List<Role> roles;
    private GamePlaymaker gamePlaymaker;
    private GameRoomController gameRoomController;
    private Map<Player,Integer> votes = new HashMap<>();
    private Timer discussionTimer;
    private int day = 0;
    private CountDownLatch preGameLatch;
    private CountDownLatch nightPhaseLatch;
    private CountDownLatch dayPhaseLatch;

    public GameRoom(String name,List<Player> players, GameRoomController gameRoomController) {
        currentPlayer = players.get(0);
        this.roomID = "TEMP"; // best generated by database
        this.name = name;
        this.players = players;
        this.gameRoomController = gameRoomController;
        this.gameRoomController.setGameRoom(this);
        gamePlaymaker = new GamePlaymaker(players);
    }

    public Player getCurrentPlayer(){
        return players.get(0);
    }

    public String getRoomID() {
        return roomID;
    }

    public List<Player> getPlayers() {
        return players;
    }

    public void preGame() {
        currentPlayer = players.get(0);
        gamePlaymaker.assignPlayerRoles();
        gameRoomController.preGameController();
        System.out.println("Day " + gamePlaymaker.getCurrentRound());

        preGameLatch.countDown();
    }

    public void nightPhase() {
        try {
            preGameLatch.await();
            System.out.println("Night phase begins...");
            gameRoomController.nightPhaseController(gamePlaymaker.getAlivePlayers());
            nightPhaseLatch.countDown();
        } catch (InterruptedException e) {
        }
    }


    public void dayPhase() {
        try {
            nightPhaseLatch.await();
            gamePlaymaker.nextRound();
            System.out.println("Day " + gamePlaymaker.getCurrentRound());
            System.out.println("Day phase begins...");

            // Start the discussion timer for 30 seconds
            discussionTimer = new Timer(30);
            discussionTimer.start();
            System.out.println("Start Discussion!");
            // Wait for the discussion timer to complete
            while (!discussionTimer.isExpired()) {
                long remainingTime = discussionTimer.getRemainingTime() / 1000; // Convert remaining time to seconds
                long countdownValue = remainingTime + 1;

                System.out.println(countdownValue);

                try {
                    Thread.sleep(1000); // Sleep for 1 second
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("Discussion time is over!");
            //voting phase
            while (gamePlaymaker.allPlayersVoted(gamePlaymaker.getCurrentRound())) {//
                try {
                    currentPlayer.castVote(gamePlaymaker.getCurrentRound(), gamePlaymaker.getAlivePlayers().get(0));
                    Thread.sleep(1000); // Sleep for 1 second before checking the condition again
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            dayPhaseLatch.countDown();
        } catch (InterruptedException e) {
        }
    }

    public void endGame() {
        System.out.println("GAME OVER");
    }

    private boolean roundEnd() {
        if(gamePlaymaker.werewolfWins() || gamePlaymaker.nonWerewolvesWin()) {
            return true;
        }
        return false;
    }

    public void runGameRoom() {
        ExecutorService executor = Executors.newFixedThreadPool(1);
        preGameLatch = new CountDownLatch(1);
        nightPhaseLatch = new CountDownLatch(1);
        dayPhaseLatch = new CountDownLatch(1);

        executor.execute(() -> {
            preGame();

            while (true) {
                dayPhase();

                if (!roundEnd()) {
                    break;
                }

                nightPhase();

                if (!roundEnd()) {
                    break;
                }
            }

            // End of the game
            Platform.runLater(() -> {
                endGame();
            });

            executor.shutdown();
        });
    }

    @Override
    public void run() {
        // Game room logic goes here
        runGameRoom();
    }
}
